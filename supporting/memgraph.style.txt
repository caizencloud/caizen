// A palette of colors used to color distinct node labels
Define(COLOR_PALETTE, AsArray(
  #DD2222, #FB6E00, #FFC500, #720096,
  #5E4FA2, #3288BD, #66C2A5, #ABDDA4,
  #E6F598, #FEE08B, #D53E4F, #9E0142
))
Define(COLOR_PALETTE_ITER, AsIterator(COLOR_PALETTE))

// If there are no palette colors to use, use random colors instead
Define(RandomColor, Function(RGB(RandomInt(255), RandomInt(255), RandomInt(255))))
Define(GetNextColor, Function(
  Coalesce(Next(COLOR_PALETTE_ITER), RandomColor())
))

// Cache map to keep a selected color for each node label
Define(ColorByLabel, AsMap())
Define(GetColorByLabel, Function(labels, Coalesce(
  Get(ColorByLabel, labels),
  Set(ColorByLabel, labels, GetNextColor())
)))
Define(JoinLabels, Function(labels, Join(Sort(labels), ":")))

// Baseline node style that will be applied to every single node
@NodeStyle {
  Define(COLOR, GetColorByLabel(JoinLabels(Labels(node))))

  size: 6
  color: COLOR
  color-hover: #cccccc
  color-selected: #999999
  border-width: 0.6
  border-color: #1D1D1D
  font-size: 3
}

// Overwrite node text with the node label if defined
@NodeStyle Greater(Size(Labels(node)), 0) {
  label: Format(":{}", Join(Labels(node), " :"))
}

// Overwrite node text with the property "name" if defined
@NodeStyle HasProperty(node, "display") {
  label: AsText(Property(node, "display"))
}

// Feel free to uncomment the lines below to set up a custom style for the specific node label
@NodeStyle HasLabel(node, "GCP_CLOUDRESOURCEMANAGER_ORGANIZATION") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Administration.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_CLOUDRESOURCEMANAGER_FOLDER") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Filestore.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_CLOUDRESOURCEMANAGER_PROJECT") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Project.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_COMPUTE_NETWORK") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Virtual-Private-Cloud.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_COMPUTE_FIREWALL") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Cloud-Firewall-Rules.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_IAM_OAUTHSCOPE") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Service-Discovery.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_IAM_ROLE") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Identity-And-Access-Management.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_IAM_SERVICEACCOUNT") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Cloud-EKM.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_RUN_REVISION") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Cloud-Run.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_STORAGE_BUCKET") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Cloud-Storage.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle And(HasLabel(node, "GCP_IDENTITY"), Equals(Property(node, "type"), "user")) {
  image-url: "https://icon.icepanel.io/GCP/png-512/Support.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle And(HasLabel(node, "GCP_IDENTITY"), Equals(Property(node, "type"), "serviceAccount")) {
  image-url: "https://icon.icepanel.io/GCP/png-512/Identity-Platform.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle And(HasLabel(node, "GCP_IDENTITY"), Equals(Property(node, "type"), "synthetic")) {
  image-url: "https://icon.icepanel.io/GCP/png-512/Permissions.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle And(HasLabel(node, "GCP_IDENTITY"), Equals(Property(node, "type"), "group")) {
  image-url: "https://icon.icepanel.io/GCP/png-512/Cloud-For-Marketing.png"
  color: #FFFFFF
  border-width: 0
}
 
@NodeStyle HasLabel(node, "GCP_REGION") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Cloud-Firewall-Rules.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_RUN_SERVICE") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Cloud-Run.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_CLOUDBUILD_TRIGGER") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Cloud-Build.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GITHUB_ORGANIZATION") {
  image-url: "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GITHUB_REPOSITORY") {
  image-url: "https://git-scm.com/images/logos/downloads/Git-Icon-Black.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_ARTIFACTREGISTRY_REPOSITORY") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Artifact-Registry.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_ARTIFACTREGISTRY_ARTIFACT") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Container-Optimized-OS.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_CLOUDSQL_INSTANCE") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Cloud-SQL.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "GCP_COMPUTE_INSTANCE") {
  image-url: "https://iconduck.com/api/v2/vectors/vctriq8n1u13/media/png/512/download"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "VULNERABILITY") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Risk-Manager.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "WORKLOAD") {
  image-url: "https://icon.icepanel.io/GCP/png-512/Compute-Engine.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "USER") {
  image-url: "https://cdn-icons-png.flaticon.com/512/7349/7349609.png?filename=malicious_7349609.png"
  color: #FFFFFF
  border-width: 0
}
@NodeStyle HasLabel(node, "INTERNET") {
  image-url: "https://icon.icepanel.io/GCP/png-512/My-Cloud.png"
  color: #FFFFFF
  border-width: 0
}
// Feel free to uncomment the lines below to set up a custom style for the specific node property
// @NodeStyle HasProperty(node, "my_property_name") {
//   color: black
//   label: AsText(Property(node, "my_property_name"))
// }

Define(LATITUDE_FIELD, "lat")
Define(LONGITUDE_FIELD, "lng")

// In the case of numeric latitude and longitude properties, set them up for a switch to a map view
@NodeStyle And(IsNumber(Property(node, LATITUDE_FIELD)), IsNumber(Property(node, LONGITUDE_FIELD))) {
  latitude: Property(node, LATITUDE_FIELD)
  longitude: Property(node, LONGITUDE_FIELD)
}

// Baseline edge style that will be applied to every single edge
@EdgeStyle {
  color: #999999
  color-hover: #666666
  color-selected: #666666
  width: 0.3
  width-hover: 0.5
  width-selected: 0.5
  font-size: 3
}

// Show edge text only if there is a small number of edges in the view
@EdgeStyle Less(EdgeCount(graph), 30) {
  label: Type(edge)
}

// In case of a map view, set the default tile layer
@ViewStyle.Map {
  tile-layer: "light"
}

// Canvas background color
@ViewStyle {
  background-color: #FFFFFF00
}

